{"version":3,"sources":["img/plus-icon.png","img/avatar1.png","img/avatar2.png","img/avatar3.png","Nav.js","HomePage.js","BadExamplePage.js","InProgressExamplePage.js","GoodExamplePage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","className","to","HomePage","BadExamplePage","href","tabIndex","onClick","alert","src","plusIcon","avatar3","avatar1","avatar2","onSubmit","e","preventDefault","placeholder","type","InProgressExamplePage","GoodExamplePage","title","alt","aria-label","scope","htmlFor","id","App","basename","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.66013196.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/plus-icon.9d40ce02.png\";","module.exports = __webpack_public_path__ + \"static/media/avatar1.fbd34523.png\";","module.exports = __webpack_public_path__ + \"static/media/avatar2.b61a1d28.png\";","module.exports = __webpack_public_path__ + \"static/media/avatar3.3c720d84.png\";","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './Nav.css'\n\nexport const Nav = () => (\n  <nav className=\"nav\">\n    <ul>\n      <li>\n        <Link to=\"/\">Home</Link>\n      </li>\n      <li>\n        <Link to=\"/bad-example\">Bad Example</Link>\n      </li>\n      <li>\n        <Link to=\"/in-progress-example\">In Progress Example</Link>\n      </li>\n      <li>\n        <Link to=\"/good-example\">Good Example</Link>\n      </li>\n    </ul>\n  </nav>\n)\n","import React from 'react'\nimport './HomePage.css'\n\nexport const HomePage = () => (\n  <div className=\"homePage\">\n    <h1>Welcome to the A11y Workshop!</h1>\n    <p>\n      In this demo app, we'll look at common accessibility issues, how to\n      identify them, and how to fix them.\n    </p>\n    <p>\n      Use the nav bar above to navigate between the good, in progress, and bad\n      example pages.\n    </p>\n  </div>\n)\n","import React from 'react'\nimport './BadExamplePage.css'\nimport plusIcon from './img/plus-icon.png'\nimport avatar1 from './img/avatar1.png'\nimport avatar2 from './img/avatar2.png'\nimport avatar3 from './img/avatar3.png'\n\nexport const BadExamplePage = () => (\n  <div className=\"badExample\">\n    <div className=\"title\">\n      <h2>Bad Example Page</h2>\n      <h4>\n        Try to find all the a11y issues on this page. There are at least 19.\n      </h4>\n    </div>\n\n    <div className=\"additionalLinks section\">\n      <h2>Links</h2>\n      <p>\n        You can find some good resources on accessibility{' '}\n        <a href=\"https://www.w3.org/TR/WCAG21/\" tabIndex=\"5\">\n          here\n        </a>\n        ,{' '}\n        <a href=\"https://www.w3.org/WAI/WCAG21/quickref/\" tabIndex=\"4\">\n          here\n        </a>\n        , and{' '}\n        <a\n          href=\"https://uxdesign.cc/your-web-accessibility-checklist-ec26b372975f\"\n          tabIndex=\"6\"\n        >\n          here\n        </a>\n        .\n      </p>\n    </div>\n\n    <div className=\"listOfItems section\">\n      <h2>Lists and Buttons</h2>\n      <p>\n        This is my shopping list:\n        <button\n          className=\"addItemButton\"\n          onClick={() => alert('Adding a new item!')}\n        >\n          <img src={plusIcon} />\n        </button>\n      </p>\n      <div className=\"listContents\">\n        <p>\n          Eggs{' '}\n          <button onClick={() => alert('Removing eggs from list!')}>\n            Remove\n          </button>\n        </p>\n        <p>\n          Bread{' '}\n          <button onClick={() => alert('Removing bread from list!')}>\n            Remove\n          </button>\n        </p>\n        <p>\n          Milk{' '}\n          <button onClick={() => alert('Removing milk from list!')}>\n            Remove\n          </button>\n        </p>\n      </div>\n    </div>\n\n    <div className=\"buttons section\">\n      <h2>Buttons</h2>\n      <p>Some styled buttons to click!</p>\n      <button\n        className=\"styledButton\"\n        onClick={() => alert('You have clicked me! Good choice.')}\n      >\n        Show Alert 1\n      </button>\n      <span\n        className=\"styledButton\"\n        onClick={() => alert('You have clicked me! Good choice too.')}\n      >\n        Show Alert 2\n      </span>\n      <a\n        className=\"styledButton\"\n        href=\"#\"\n        onClick={() => alert('You have clicked me! Excellent choice.')}\n      >\n        Show Alert 3\n      </a>\n    </div>\n\n    <div className=\"meetTheTeam section\">\n      <h2>Images</h2>\n      <p>Meet the team!</p>\n      <div className=\"avatarsContainer\">\n        <img src={avatar3} />\n        <img src=\"/intentionally/bad/path/fakeImage.png\" />\n        <img src={avatar1} />\n        <img src={avatar2} />\n      </div>\n    </div>\n\n    <div className=\"tableData section\">\n      <h2>Tables</h2>\n      <p>Let's look at some data.</p>\n      <p>\n        Which of the following is your primary desktop/laptop screen reader?\n      </p>\n      <div className=\"tableBody\">\n        <div className=\"tableColumn\">\n          <div className=\"tableHeader tableDataItem\">Screen Reader</div>\n          <div className=\"tableDataItem\">NVDA</div>\n          <div className=\"tableDataItem\">JAWS</div>\n          <div className=\"tableDataItem\">VoiceOver</div>\n          <div className=\"tableDataItem\">Narrator</div>\n        </div>\n        <div className=\"tableColumn\">\n          <div className=\"tableHeader tableDataItem\">% of Respondents</div>\n          <div className=\"tableDataItem\">40.6%</div>\n          <div className=\"tableDataItem\">40.1%</div>\n          <div className=\"tableDataItem\">12.9%</div>\n          <div className=\"tableDataItem\">1.0%</div>\n        </div>\n      </div>\n    </div>\n\n    <div className=\"forms section\">\n      <h2>Forms</h2>\n      <p>Please provide your contact info.</p>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault()\n          alert('Form submitted!')\n        }}\n      >\n        <div className=\"formGroup\">\n          <span className=\"label\">First Name</span>\n          <input className=\"textInput\" placeholder=\"First Name\" />\n        </div>\n\n        <div className=\"formGroup\">\n          <span className=\"label\">Last Name</span>\n          <input className=\"textInput\" placeholder=\"Last Name\" />\n        </div>\n        <div className=\"formGroup\">\n          <span className=\"label\">Email</span>\n          <input className=\"textInput\" />\n        </div>\n        <div className=\"formGroup\">\n          <span className=\"label\">Date of Birth</span>\n          <input className=\"textInput\" />\n        </div>\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  </div>\n)\n","import React from 'react'\nimport './InProgressExamplePage.css'\nimport plusIcon from './img/plus-icon.png'\nimport avatar1 from './img/avatar1.png'\nimport avatar2 from './img/avatar2.png'\nimport avatar3 from './img/avatar3.png'\n\nexport const InProgressExamplePage = () => (\n  <div className=\"inProgressExample\">\n    <div className=\"title\">\n      <h2>In Progress Example Page</h2>\n      <h4>\n        This page is copied directly from the Bad Example Page and will be our\n        copy to modify.\n      </h4>\n    </div>\n\n    <div className=\"additionalLinks section\">\n      <h2>Links</h2>\n      <p>\n        You can find some good resources on accessibility{' '}\n        <a href=\"https://www.w3.org/TR/WCAG21/\" tabIndex=\"5\">\n          here\n        </a>\n        ,{' '}\n        <a href=\"https://www.w3.org/WAI/WCAG21/quickref/\" tabIndex=\"4\">\n          here\n        </a>\n        , and{' '}\n        <a\n          href=\"https://uxdesign.cc/your-web-accessibility-checklist-ec26b372975f\"\n          tabIndex=\"6\"\n        >\n          here\n        </a>\n        .\n      </p>\n    </div>\n\n    <div className=\"listOfItems section\">\n      <h2>Lists and Buttons</h2>\n      <p>\n        This is my shopping list:\n        <button\n          className=\"addItemButton\"\n          onClick={() => alert('Adding a new item!')}\n        >\n          <img src={plusIcon} />\n        </button>\n      </p>\n      <div className=\"listContents\">\n        <p>\n          Eggs{' '}\n          <button onClick={() => alert('Removing eggs from list!')}>\n            Remove\n          </button>\n        </p>\n        <p>\n          Bread{' '}\n          <button onClick={() => alert('Removing bread from list!')}>\n            Remove\n          </button>\n        </p>\n        <p>\n          Milk{' '}\n          <button onClick={() => alert('Removing milk from list!')}>\n            Remove\n          </button>\n        </p>\n      </div>\n    </div>\n\n    <div className=\"buttons section\">\n      <h2>Buttons</h2>\n      <p>Some styled buttons to click!</p>\n      <button\n        className=\"styledButton\"\n        onClick={() => alert('You have clicked me! Good choice.')}\n      >\n        Show Alert 1\n      </button>\n      <span\n        className=\"styledButton\"\n        onClick={() => alert('You have clicked me! Good choice too.')}\n      >\n        Show Alert 2\n      </span>\n      <a\n        className=\"styledButton\"\n        href=\"#\"\n        onClick={() => alert('You have clicked me! Excellent choice.')}\n      >\n        Show Alert 3\n      </a>\n    </div>\n\n    <div className=\"meetTheTeam section\">\n      <h2>Images</h2>\n      <p>Meet the team!</p>\n      <div className=\"avatarsContainer\">\n        <img src={avatar3} />\n        <img src=\"/intentionally/bad/path/fakeImage.png\" />\n        <img src={avatar1} />\n        <img src={avatar2} />\n      </div>\n    </div>\n\n    <div className=\"tableData section\">\n      <h2>Tables</h2>\n      <p>Let's look at some data.</p>\n      <p>\n        Which of the following is your primary desktop/laptop screen reader?\n      </p>\n      <div className=\"tableBody\">\n        <div className=\"tableColumn\">\n          <div className=\"tableHeader tableDataItem\">Screen Reader</div>\n          <div className=\"tableDataItem\">NVDA</div>\n          <div className=\"tableDataItem\">JAWS</div>\n          <div className=\"tableDataItem\">VoiceOver</div>\n          <div className=\"tableDataItem\">Narrator</div>\n        </div>\n        <div className=\"tableColumn\">\n          <div className=\"tableHeader tableDataItem\">% of Respondents</div>\n          <div className=\"tableDataItem\">40.6%</div>\n          <div className=\"tableDataItem\">40.1%</div>\n          <div className=\"tableDataItem\">12.9%</div>\n          <div className=\"tableDataItem\">1.0%</div>\n        </div>\n      </div>\n    </div>\n\n    <div className=\"forms section\">\n      <h2>Forms</h2>\n      <p>Please provide your contact info.</p>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault()\n          alert('Form submitted!')\n        }}\n      >\n        <div className=\"formGroup\">\n          <span className=\"label\">First Name</span>\n          <input className=\"textInput\" placeholder=\"First Name\" />\n        </div>\n\n        <div className=\"formGroup\">\n          <span className=\"label\">Last Name</span>\n          <input className=\"textInput\" placeholder=\"Last Name\" />\n        </div>\n        <div className=\"formGroup\">\n          <span className=\"label\">Email</span>\n          <input className=\"textInput\" />\n        </div>\n        <div className=\"formGroup\">\n          <span className=\"label\">Date of Birth</span>\n          <input className=\"textInput\" />\n        </div>\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  </div>\n)\n","import React from 'react'\nimport './GoodExamplePage.css'\nimport plusIcon from './img/plus-icon.png'\nimport avatar1 from './img/avatar1.png'\nimport avatar2 from './img/avatar2.png'\nimport avatar3 from './img/avatar3.png'\n\nexport const GoodExamplePage = () => (\n  <main className=\"goodExample\">\n    <header className=\"title\">\n      <h1>Good Example Page</h1>\n      <p>\n        This page is nearly identical to the Bad Example Page but is nice and\n        accessible.\n      </p>\n    </header>\n\n    <section className=\"additionalLinks section\">\n      <h2>Links</h2>\n      <p>\n        You can find some good resources on accessibility at the{' '}\n        <a href=\"https://www.w3.org/TR/WCAG21/\">WCAG docs</a>,{' '}\n        <a href=\"https://www.w3.org/WAI/WCAG21/quickref/\">\n          WCAG quick reference\n        </a>\n        , and from{' '}\n        <a href=\"https://uxdesign.cc/your-web-accessibility-checklist-ec26b372975f\">\n          this accessibility checklist\n        </a>\n        .\n      </p>\n    </section>\n\n    <section className=\"listOfItems section\">\n      <h2>Lists and Buttons</h2>\n      <p>\n        This is my shopping list:\n        <button\n          className=\"addItemButton\"\n          onClick={() => alert('Adding a new item!')}\n          title=\"Add item\"\n        >\n          <img src={plusIcon} alt=\"Add item to list\" />\n        </button>\n      </p>\n      <ul className=\"listContents\">\n        <li>\n          Eggs{' '}\n          <button\n            onClick={() => alert('Removing eggs from list!')}\n            aria-label=\"Remove item: Eggs\"\n          >\n            Remove\n          </button>\n        </li>\n        <li>\n          Bread{' '}\n          <button\n            onClick={() => alert('Removing bread from list!')}\n            aria-label=\"Remove item: Bread\"\n          >\n            Remove\n          </button>\n        </li>\n        <li>\n          Milk{' '}\n          <button\n            onClick={() => alert('Removing milk from list!')}\n            aria-label=\"Remove item: Milk\"\n          >\n            Remove\n          </button>\n        </li>\n      </ul>\n    </section>\n\n    <section className=\"buttons section\">\n      <h2>Buttons</h2>\n      <p>Some styled buttons to click!</p>\n      <button\n        className=\"styledButton\"\n        onClick={() => alert('You have clicked me! Good choice.')}\n      >\n        Show Alert 1\n      </button>\n      <button\n        className=\"styledButton\"\n        onClick={() => alert('You have clicked me! Good choice too.')}\n      >\n        Show Alert 2\n      </button>\n      <button\n        className=\"styledButton\"\n        onClick={() => alert('You have clicked me! Excellent choice.')}\n      >\n        Show Alert 3\n      </button>\n    </section>\n\n    <section className=\"meetTheTeam section\">\n      <h2>Images</h2>\n      <p>Meet the team!</p>\n      <div className=\"avatarsContainer\">\n        <img src={avatar3} alt=\"Jennifer\" />\n        <img src=\"/intentionally/bad/path/fakeImage.png\" alt=\"Thomas\" />\n        <img src={avatar1} alt=\"Sarah\" />\n        <img src={avatar2} alt=\"Chad\" />\n      </div>\n    </section>\n\n    <section className=\"tableData section\">\n      <h2>Tables</h2>\n      <p>Let's look at some data.</p>\n      <p>\n        Which of the following is your primary desktop/laptop screen reader?\n      </p>\n      <table className=\"tableBody\">\n        <thead>\n          <tr>\n            <th scope=\"col\" className=\"tableHeader tableDataItem\">\n              Screen Reader\n            </th>\n            <th scope=\"col\" className=\"tableHeader tableDataItem\">\n              % Respondents\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td className=\"tableDataItem\">NVDA</td>\n            <td className=\"tableDataItem\">40.6%</td>\n          </tr>\n          <tr>\n            <td className=\"tableDataItem\">JAWS</td>\n            <td className=\"tableDataItem\">40.1%</td>\n          </tr>\n          <tr>\n            <td className=\"tableDataItem\">VoiceOver</td>\n            <td className=\"tableDataItem\">12.9%</td>\n          </tr>\n          <tr>\n            <td className=\"tableDataItem\">Narrator</td>\n            <td className=\"tableDataItem\">2.0%</td>\n          </tr>\n        </tbody>\n      </table>\n    </section>\n\n    <section className=\"forms section\">\n      <h2>Forms</h2>\n      <p>Please provide your contact info.</p>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault()\n          alert('Form submitted!')\n        }}\n      >\n        <div className=\"formGroup\">\n          <label className=\"label\" htmlFor=\"firstName\">\n            First Name\n          </label>\n          <input id=\"firstName\" className=\"textInput\" placeholder=\"John\" />\n        </div>\n\n        <div className=\"formGroup\">\n          <label className=\"label\" htmlFor=\"lastName\">\n            Last Name\n          </label>\n          <input id=\"lastName\" className=\"textInput\" placeholder=\"Doe\" />\n        </div>\n        <div className=\"formGroup\">\n          <label className=\"label\" htmlFor=\"email\">\n            Email\n          </label>\n          <input\n            className=\"textInput\"\n            type=\"email\"\n            placeholder=\"john.doe@email.com\"\n            id=\"email\"\n          />\n        </div>\n        <div className=\"formGroup\">\n          <label className=\"label\" htmlFor=\"birthDate\">\n            Date of Birth\n            <br />\n            (MM/DD/YYYY)\n          </label>\n          <input className=\"textInput\" id=\"birthDate\" />\n        </div>\n        <button type=\"submit\">Submit</button>\n      </form>\n    </section>\n  </main>\n)\n","import React from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport { Nav } from './Nav'\nimport { HomePage } from './HomePage'\nimport { BadExamplePage } from './BadExamplePage'\nimport { InProgressExamplePage } from './InProgressExamplePage'\nimport { GoodExamplePage } from './GoodExamplePage'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <BrowserRouter basename=\"/a11y-workshop/build\">\n        <Nav />\n        <div className=\"appPages\">\n          <Switch>\n            <Route path=\"/bad-example\">\n              <BadExamplePage />\n            </Route>\n            <Route path=\"/in-progress-example\">\n              <InProgressExamplePage />\n            </Route>\n            <Route path=\"/good-example\">\n              <GoodExamplePage />\n            </Route>\n            <Route path=\"*\">\n              <HomePage />\n            </Route>\n          </Switch>\n        </div>\n      </BrowserRouter>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}